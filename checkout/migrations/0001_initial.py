# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-12 03:46
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False, unique=True)),
                ('display_name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            managers=[
                ('user_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.IntegerField()),
                ('date', models.DateField()),
                ('period', models.IntegerField(choices=[(1, 'Period 1'), (2, 'Period 2'), (3, 'Period 3'), (4, 'Period 4'), (5, 'Activity 1'), (6, 'Activity 2')])),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.Classroom')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SiteSku',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units', models.IntegerField()),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.Site')),
            ],
        ),
        migrations.CreateModel(
            name='SKU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_identifier', models.CharField(max_length=200)),
                ('display_name', models.CharField(max_length=50)),
                ('units', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.Site')),
                ('team', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_number', models.IntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('days', models.ManyToManyField(blank=True, to='checkout.Day')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.Site')),
            ],
        ),
        migrations.AddField(
            model_name='sitesku',
            name='sku',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.SKU'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='site_sku',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.SiteSku'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.Team'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checkout.Site'),
        ),
        migrations.AddField(
            model_name='user',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='checkout.Site'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='week',
            unique_together=set([('site', 'week_number')]),
        ),
        migrations.AlterUniqueTogether(
            name='sitesku',
            unique_together=set([('site', 'sku')]),
        ),
        migrations.AlterUniqueTogether(
            name='classroom',
            unique_together=set([('site', 'name'), ('site', 'code')]),
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together=set([('site', 'display_name')]),
        ),
    ]
